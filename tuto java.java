// Ceci est un fichier qui regroupe tout les cours sur le java

// ===== Les variables  =====

// voici comment est composer une variable
// 1 - Nom
// 2 - Type
// 3 - Valeur

// Il existe une type de variable qu'on peut stocker pour toujours, elle s'appelle (une constante)

// DÔøΩclarer une variable
// Les types :

// int = les chiffres
// Int peut stocker que des chiffres sans virgules pour stocker des chiffres a virgules, il faut utiliser le type (double)
// String = texte

// String text = "A wonderful string that consists of multiple characters"
// int numberOfVowels = 0
// double percentageOfVowels = 0.0

// Exemple:

int personnels = 1200;
double euro = 10.20;

// Pour commencer, nous allon cr√©e le fichier java principal, dans un programme, c'est ce fichier la qui s'execute en premier
// Exemple pour cr√©e le fichier principal

public class MyVariable { /* (public class) cela veut dire que ce fichier (qu'on appelle une class) est acc√©ssible pour tous */
    public static void main(String[] args) { /* Main veut dire que c'est la class principal */

        /*Le code*/

        /*Exemple*/
        int ongoingAllowance = 200;
        int savings = 3000;
        int bonusAllowance = ongoingAllowance * savings;

        /* Afficher le r√©sultat */
        System.out.println("You have an ongoing allowance of " + ongoingAllowance + "\nYour savings amount is " + savings + "\nYou have a bonus allowance of " + bonusAllowance);
    }
}

// Encore un autre exemple:

public class MyVariable {
    public static void main(String[] args) {
        int savings = 500;
        int ongoingAllowance = 2000;

        //Ajoutez 100 √† votre √©pargne (Yeah!)
        savings = savings + 100;

        //Enlevez 50 √† votre indemnit√© (Snif)
        ongoingAllowance = ongoingAllowance - 50;

        //Faites une mise √† jour sur votre d√©lai d'√©pargne
        int numberOfDaysToSave = (5000 - ongoingAllowance) / 500;

        //Mettez √† jour √† nouveau votre indemnit√© (encore)
        ongoingAllowance = ongoingAllowance + (30 - 10) * 7;

        // Les racourcis de varibles

        // Version d'affectation normale
        savings = savings + 100;

        // Version raccourcie d'affectation
        savings += 100;
    }
}
===== D√©couvrez des variables qui ne changent jamais =====

//Exemple:
final int numberOfWeekdays = 7;
final String myFavouriteFood = "Icecream";
// Au dessus ce trouve des variable qui ne changeront jamais (si on essaye de les changer, on aura une erreur)

// Les type de variables:

Les d√©cimales
Pour les d√©cimales, Java utilise deux types diff√©rents :

float
double

// Ces deux types ont le m√™me but. La diff√©rence est que  double  est deux fois plus pr√©cis que  float, ce qui signifie qu'il propose plus de d√©cimales d'un nombre apr√®s la virgule.
// Si vous avez besoin de stocker quelque chose de grand, comme un num√©ro √† 12 chiffres  1876.79797657, vous devrez utiliser  double. En effet,  float  ne pourra stocker que la moiti√© de ce chiffre... 
// Le reste serait tronqu√© et perdu √† tout jamais !
// Exemple:
float length = 1876.79;
double width = 1876.79797657;

// Par exemple :

double a = 1876.79797657765609870978709780987;
float b = 1876.79797657765609870978709780987;

// Eh bien, elles vont perdre toutes les deux un peu de pr√©cision, mais pas au m√™me degr√© :

// a -> 1876.797976
// b -> 1876.79

int a = 10;
double b = 4;
int c = a/ (int) b; //-> c contient 2, car a /(int) b est une division enti√®re
// Vous voyez comment nous avons fait pour que la variable  b  agisse comme un nombre entier ? Vous pouvez aussi faire en sorte qu‚Äôune variable enti√®re  b fasse comme si sa valeur √©tait  double  :

int a = 10;
int b = 4;
double c = a/(double) b; //-> c contient 2.5, car la valeur de b est transform√©e en double
// Convertir une variable en  double  vous permet d'effectuer une division en virgule flottante, m√™me si vous utilisez des variables avec un type entier  int.

========== D√©couvrez les cha√Ænes de caract√®res (strings) ==========

// Voici comment d√©clarer une variable string en java

String city = "New York";
String movie = "Best ever";
String pet;
String emptyString = ""

// Exemple avec des chiffres
String favoriteCity = "Buenos Aires";
int numberOfTrips = 5;

String story = "I've traveled to " +favoriteCity+ " " +numberOfTrips+ " times!"; // -> "I've traveled to Buenos Aires 5 times!"

// En r√©sum√©
// Dans ce chapitre, vous avez appris les particularit√©s de quelques types de donn√©es simples :

// nombre entiers (mot-cl√©  int) ;
// nombres d√©cimaux (mots cl√©s  float  et  double) ;
// cha√Ænes de caract√®res (mot cl√©  String).

// Dans le chapitre suivant, nous aborderons la fonction main ; c'est le point d'entr√©e de votre programme.



========== √âcrivez une fonction principal propre (Main) ==========

// Fonction principal
// - Est le programme
// - D√©clench√©e en premier

/*Lorsqu'une fonction est situ√©e √† l'int√©rieur d'une classe, elle s'appelle une m√©thode. 
Puisque tout le code est situ√© √† l'int√©rieur de classes, 
vous pouvez utiliser les deux termes (fonctions et m√©thodes) de mani√®re interchangeable. üòé*/

// Voici le code java qui permet de faire la fonction principal :


package hello;
/* Ceci est une impl√©mentation du message traditionnel "Hello world!"*/
public class HelloWorld {

/** Le programme commence ici */
    public static void main(String[] args) {
        System.out.println("Hello World!");
    }

}

// D√©cryptons ce code : (https://openclassrooms.com/fr/courses/6173501-debutez-la-programmation-avec-java/6445721-ecrivez-une-fonction-principale-propre)

=======

/** la premi√®re instruction,  package hello;, est une d√©claration de package. 
// Ne tenez pas compte de cette ligne pour le moment, sachez seulement qu'elle permet d'utiliser Hello ;

// la d√©claration  public class HelloWorld  d√©finit le nom de la classe comme √©tant  HelloWorld. En Java, 
// l'ensemble du code doit se trouver √† l'int√©rieur d'une classe.

// les classes servant de mod√®le pour les objets( ici HelloWorld). Nous y reviendrons dans la partie suivante. 
// Ces classes d√©finissent l'√©tat de l'objet avec les champs, et le comportement de l'objet avec les m√©thodes,

// une instruction avec une classe utilitaire nomm√©e 
// System. Ce genre de classe n'a pas besoin d'√™tre instanci√©e pour √™tre utilis√©e ;

// √† l'int√©rieur d‚Äôune classe, vous trouverez la d√©claration de fonction  public static void main(String[] args). 
// C'est le morceau de code que l'interpr√©teur Java recherche lorsque vous d√©marrez un programme ; */


// Une fois le code √©cris :

// Lorsque tout le code est √† l'int√©rieur du fichier, vous devez convertir ce code Java en code ex√©cutable par une machine que l'ordinateur peut comprendre.


========== Executer un fichier .java ==========

// Voir le dossier dans one drive
// C:\Users\killi\OneDrive\TutoDev\Tuto Java\root\


// Le langage dans lequel le code Java doit √™tre transform√© est appel√© Bytecode. 
// Pour transformer le code Java en Bytecode, il est n√©cessaire d'utiliser le compilateur javac.

// Et c'est √† ce moment-l√† que les dossiers commencent √† √™tre utiles ! En utilisant Terminal, 
// naviguez jusqu'au dossier racine  root  de votre programme et ex√©cutez la commande suivante :

// $ javac hello‚àñHelloWorld.java
// La commande javac est en fait elle-m√™me un programme. Si vous √™tes sous Windows, elle sera nomm√©e javac.exe.

==========

// Cette commande cr√©e un fichier HelloWorld.class dans le dossier Hello. 
// Ce fichier est un fichier binaire (vous ne pouvez pas l'ouvrir dans un √©diteur de texte). 
// Vous pouvez maintenant ex√©cuter le programme avec la commande java (ou java.exe sous Windows) :

$ Java hello.HelloWorld
// R√©sultat
Hello World!
==============================

// Bravo ! ‚úåÔ∏è Dans le reste de ce chapitre, nous allons nous concentrer sur la fa√ßon d'organiser 
// votre code afin que votre fonction  main  reste aussi petite que possible.



========== Organisez votre code de mani√®re √† ce qu''il soit le plus compact possible ==========

// Le but de votre fonction  main  est de d√©marrer votre programme. 
// En fait, c'est votre programme. Si vous deviez √©crire toute la logique de votre programme √† l'int√©rieur du main, 
// cela pourrait donner une trop grande quantit√© de code √† un seul endroit. 
// Ce serait difficilement compr√©hensible pour nous, les humains, et compliquerait le maintien de votre programme. 
// C'est la raison pour laquelle vous devez organiser votre code en classes.

========== Utilisez des classes en tant que mod√®les ==========

// Un exemple d'une telle classe est la classe  String  que vous utilisez pour stocker et manipuler les cha√Ænes de caract√®res dans votre programme. 
// Cette classe est disponible dans le package  java.lang, qui est disponible depuis n'importe quelle partie de votre code.

// Comment se fait-il que  String  soit une classe et non un type primitif tel que  int  ou  double  ?

// String  est une classe non seulement parce que son nom commence par une lettre majuscule, mais aussi parce qu'il d√©finit un √©tat et un comportement :

// Son √©tat est la cha√Æne de caract√®res que vous stockez. La valeur r√©elle est d√©finie pour chaque objet lorsque vous l'instanciez.

// Son comportement est l'ensemble des m√©thodes que la classe  String  d√©finit et qui vous permettent d'op√©rer sur la cha√Æne que vous stockez.
// Voyons cela en action :

package stringDemo;

public class StringDemo {

    public static void main(String[] args) {
        // D√©clarez et cr√©ez une cha√Æne de caract√®res
        String shockingSentence="The Java String type actually is a class, not a simple type!";
        // Faites-le savoir
        System.out.println(shockingSentence.toUpperCase());
        // Inversez-le
        System.out.println(shockingSentence.replace("simple","primitive"));
    }
    
}

// Compilons et ex√©cutons ce programme :

=       // $ javac stringDemo.StringDemo.java
=       // $ java stringDemo.StringDemo
=       // THE JAVA STRING TYPE ACTUALLY IS A CLASS, NOT A SIMPLE TYPE! 
=       // The Java String type actually is a class, not a primitive type!

// Comme vous pouvez le constater, la classe  String  vous donne acc√®s √† des comportements pr√©d√©finis. 
// Vous pouvez simplement les utiliser pour manipuler String comme bon vous semble.

// site pratique: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html




========== Nettoyez votre fonction main ============

/*Penchons-nous maintenant sur votre fonction main  et prenons-en le contr√¥le. 
Nous allons la rendre aussi propre et nette que possible. 
Voici une impl√©mentation ¬´ propre et nette ¬ª de notre programme HelloWorld :*/

package cleanHello;

public class CleanWorld {

    /** Le programme commence ici */
    public static void main(String[] args) { //String[] d√©finis que on d√©finir une chaine de charact√®re
        sayHelloTo("world");
    }

    /** affiche le message "hello" au destinataire fourni
    *
    * @param recipient
    */
    private static void sayHelloTo(String recipient) { // String car on prend un r√©sultat (on ne la d√©finis pas).
        // Ceci est une class qui prend le param√®tre sayHelloTo qui a √©t√© difinis sur la classe principal.
        // On la prend et on lui 'String recipient' recipient est le param√®tre qui nous sert a prendre le r√©sultat du string "sayHelloTo"

        System.out.println("Hello " + recipient);
    }

}

/*
Comme vous pouvez le voir, la classe  CleanWorld  d√©finit deux m√©thodes :

1.  main  est le point de d√©part du programme. Son seul job, 
c'est de transmettre le travail √† la m√©thode sayHello avec l'argument dont elle a besoin. 
Dans notre cas, c'est le destinataire pr√©d√©fini de notre hello: the world!

2.  La m√©thode  sayHello  imprime la cha√Æne ¬´ Hello ¬ª 
et ajoute la valeur fournie √† la variable destinataire  recipient  lorsqu'elle est appel√©e par la m√©thode main.

En termes de fonctionnalit√©s, rien n'a chang√©. Cependant, 
vous pouvez maintenant ajouter plus de logique au message 
que vous allez afficher en changeant la m√©thode  sayHello  et en personnalisant le nom du destinataire.
*/

========== Cr√©e une m√©thode (plus simple) ==========
// Cette technique est plus simple que celle juste au dessus "Nettoyez votre fonction main"

public class HelloWorld { // la classe HelloWorld

static void printHello(){ // On cr√©e une m√©thode printHello
     System.out.println("Hello World! yeah");
}

public static void main(String[] args) { //On appel le resultat de la m√©thode dans la fonction principal (main)
    printHello();
}
}

// Saisissez la port√©e de vos variables dans votre code

// Acc√©der √† une variable
//  Via leur bloc de code
//  |-> Port√©e de la variable

//  Niveau d'acc√®s

//Obtenir une variable depuis une autres class
// Dans le fichier 1.java
class Unicorn {
//    Properties
    int height = 170;
    String power = "Double.infinity"

//  Methods
    public static void sleep(){
        int minutesToSleep = 120;

        // attempt to access
        System.out.println(minutesToSleep); // Ok
        System.out.println(minutesToRun); // Error
        System.out.println(height); // Ok
        System.out.println(power); // Ok
    }
    public static void run(){
        int minutesToRun = 60;

        // Attempt to access
        System.out.println(minutesToSleep); // Error
        System.out.println(minutesToRun); // Ok
        System.out.println(height); // Ok
        System.out.println(power); // Ok
    }
}
// Dans le fichier 2.java

Unicorn unicorn = new Unicorn();

System.out.println("I know it's height: "+(unicorn.height);

// et peut changer son pouvoir !
unicorn.power = 0; // pas dr√¥le!

//Appeler une class priv√©e
        PrivateClass a = new PrivateClass(); // Erreur
        private PrivateClass b = new PrivateClass(); // Ok
        private PrivateClass c = new PrivateClass(); // Ok


// ========== Les Boucles ==========

// Types de boucle:
/*
* De d√©nombrement
*   FOR
*
* Conditionnelles
*   WHILE
* */

// Les boucles FOR
for (int i=0; i<5;i++) { // Arg1 = Valeur de d√©but, Arg2 = Le nombre de r√©p√©tition, Arg3 = ce que la boucle va faire
System.out.println("Clap your hands!");
}

for (initialization; termination; increment) {
// liste de d√©clarations
}

int[] myArray = new int[]{7,2,4}; // ce ci est un tableau de chiffres

for (int i=0; i<myArray.length; i++) {
System.out.println(myArray[i]);
}


// Les boucles WHILE

while (logicalExpression) {
// liste de d√©clarations
}

// Autres exemple

int numberOfTrees = 0;

while (numberOfTrees < 10) {
numberOfTrees += 1;
System.out.println("I planted " + numberOfTrees + " trees");
}

System.out.println("I have a forest!");

// Les DO WHILE

int pushUpGoal = 10;
do{
print ("Push up!");
pushUpGoal -= 1;
} while(pushUpGoal > 0);

/*
* De cette fa√ßon, au moins une pompe (un ¬´ push-up ¬ª) est effectu√©e avant m√™me que la condition soit v√©rifi√©e.
* Modifions cela un petit peu pour montrer la diff√©rence par rapport √† la boucle while d'origine :

Prenons un exemple :
* */

// Boucle "While"
        int pushUpGoal = 0;
        while(pushUpGoal > 0) {
        System.out.println ("Push up!");
        pushUpGoal -= 1;
        }

// Boucle "do/while"
        int pushUpGoal = 0;
        do{
        System.out.println ("Push up!");
        pushUpGoal -= 1;
        } while (pushUpGoal > 0);

/*
* Vous pouvez voir que l'utilisation de la boucle while d'origine n'effectuera pas de ¬´ push-ups ¬ª. La boucle do... while provoquera un push-up une seule fois.
* */


// Ignorez quelques instructions √† l'int√©rieur d'une boucle

for ( int i=0; i <10; i++) {
// d√©clarations ex√©cut√©es √† chaque it√©ration
if(i == 2 ||i == 5) {
continue; // set a annuler le resultat 2 ou 5
}
// d√©clarations non-ex√©cut√©es quand i == 2 or 5
}

// Pour int√©rrompre une boucle

String[] basket = new String[]{"apple", "orange", "banana"};

    for (int i =0; i<basket.length;i++) {
        if (basket[i] == "orange") {
        System.out.println ("I have an " +basket[i]+ " !");
        break;
        }
    }



// ========== D√©finissez les objets et leurs attributs avec des classes ==========








// Orient√© Objet !
// Exemple d'un fichier main.java et Manager.java

// En orient√© objet, une class est un objet

// == Main.java ==

package fr.jlskyzer.tuto

public class main {
    // Le static sert juste a l'initialisation
    public static void main(String[] args) {
        // On cr√©e une nouvelle instance nommer "manager" en copiant l'objet Manager
        // New = nouvelle instance par exemple je peut faire des actions avec l'objet Manager en l'appelant "manager" et non son nom de base "Manager"
        Manager manager = new Manager();
        manager.print("Test fonction"); // Ca va envoyer le text a la fonction qui se trouve dans la class Manager
    }
}


// == Manager.java ==

package fr.jlskyzer.tuto

public class Manager {

    public Manager() {
        System.out.println("Manager appel√© !");

        // Va appeler l'initialisation
        this.init();
    }

    public void print(String text){
        System.out.println("[DEBUG - Manager] " + text);
    }

    // L'initialisation (utiliser pour les cr√©ation d'interface graphique par exemple)
    private void init(){
        People people1 = new People(false, 25);
        People people2 = new People(true, 17);

        System.out.println("people1 : " + people1.getAge() + " || IsFemale ? " + people1.isFemale())
    }
    
}

// Pour enregistrer des gens (People.java)
package fr.jlskyzer.tuto

public class People {

    private boolean female;
    private int age;

    public People(boolean inputFemale, int inputAge) {
        this.female = inputFemale;
        this.age = inputAge;
    }

    // Les geter et seter (geter = definition, seter = aquisition)

    public void setIsFemale(boolean inputFemale){
        this.female = inputFemale;
    }
    public boolean isFemale(){
        return this.female;
    }

    public void setAge(int inputAge) {
        this.age = inputAge;
    }

    public int getAge() {
        return this.age;
    }

    // Pour savoir si la personne est mineur:

    public boolean isMinor() {
        boolean isMinor = this.age < 18;
        return isMinor;
    }
}


// Les liste

package fr.jlskyzer.tuto;

import java.util.ArrayList;
import java.util.List;

public class Manager {
    private List<String> list = new ArrayList<String>();

    public void launch(){
        System.out.println"Launched !";
        list.add("Arg1");
        list.add("Arg2");

        // list.clear = tout suppr
        // list.remove = supprimer un truc pr√©cis
        // list.contains = est ce que la liste contient etc.....

        // /kill Maxime
        if (list.contain("Maxime")) {
            System.out.println("Vous avez tuer Maxime")
        } else {
            System.out.println("Il n'est pas connecter")
        }
    }
}

// ======================== Deuxi√®me m√©thode (pour des USER)

// User.java

package fr.jlskyzer;

public class User {

    private String name;

    public User(String, name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

// Manager.java

package fr.jlskyzer;

import java.util.ArrayList;
import java.util.List;

public class Manager {
    private List<User> list = new ArrayList<User>();

    public void launch(){
        System.out.println"Launched !";
        
        list.add(new User("Killian"));
        list.add(new User("Maxime"));

        System.out.println('List : ' + list);
        // Console: List: [fr.jlskyzer.User@5ebbe15, fr.jlskyzer.User@22bbe15] (Id al√©atoire)

        // Une boucle POUR CHAQUE utilisateur
        for(User user : list) {
            System.out.println('List : ' + user.getName());
            /* Console:
            List : Killian
            List : Maxime */
        }

        // Autre type de v√©rif
        for(User user : list) {
            if (user.getName().equalsIgnoreCase("Maxime")) {
                // KILL
                return;
            }
        }
    }
}


